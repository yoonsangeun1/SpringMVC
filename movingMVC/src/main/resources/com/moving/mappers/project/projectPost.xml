<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="projectPost"><!-- 매퍼 네임스페이스명 -->

	<!-- 0) 프로젝트 불러오면서 모든 정보 다 불러오기  -->
	<!-- 0-1) projectInfo resultMap 생성 -->
	<resultMap type="projectPostVO" id="projectInfo">
		<id property="id" column="project_post_id"/>
		
		<association property="mUserVO" javaType="com.moving.domain.MUserVO" 
		column="user_id" select="selectProjectAuthor">
		<!-- <id property="id" column="m_user_id"/> -->
		</association>
		<!-- 1:1 매핑 실행 결과. property는 자바 변수명, javaType은 자바 변수 객체 경로, 
		select는 변수에 담을 값을 검색하는 메서드, column은 select를 실행할 때 필요한 컬럼 값 
		=> project_post의 user_id값을 기준으로 m_user테이블에서 유저 정보를 불러와 MUserVO타입 mUserVO 변수에 저장-->
		
		<collection property="rewardVO" 
			javaType="java.util.ArrayList" ofType="rewardVO" 
			column="id" select="selectProjectRewards"/>
		<collection property="attachedFileVO" 
			javaType="java.util.ArrayList" ofType="AttachedFileVO" 
			column="id" select="selectProjectAttachedFiles"/>
		<collection property="tagVO" 
			javaType="java.util.ArrayList" ofType="tagVO" 
			column="id" select="selectProjectTags"/>
		<collection property="mCommentVO" javaType="java.util.ArrayList" ofType="mCommentInfo"
			 column="id" select="selectProjectComments"/>
		<!-- 1:다 매핑 실행 결과 -->
	</resultMap>
	
	<!-- 0-2) 프로젝트 정보 + 작성자 + 리워드 + 첨부파일 + 댓글 다 불러오기 -->
	<!-- 0-2-1) 프로젝트 정보 -->
	<select id="selectProjectInfo" resultMap="projectInfo">
		SELECT id as project_post_id, title, content, introduce, 
		business, target_price, now_price, target_limit, left_limit, 
		sponser_count, hit, comment_count, move_count, register_date
		FROM PROJECT_POST
		WHERE ID = #{id}
	</select>
	<!-- 0-2-2) 프로젝트 작성자 -->
	<select id="selectProjectAuthor" resultType="mUserVO">
		SELECT * FROM M_USER
		WHERE ID = #{user_id}
	</select>
	<!-- 0-2-3) 프로젝트 리워드 -->
	<select id="selectProjectRewards" resultType="rewardVO">
		SELECT * FROM REWARD
		WHERE PROJECT_POST_ID = #{id}
		ORDER BY PRICE ASC
	</select>
	<!-- 0-2-4) 프로젝트 첨부파일 -->
	<select id="selectProjectAttachedFiles" resultType="attachedFileVO">
		SELECT * FROM ATTACHED_FILE 
		WHERE project_post_id = #{id} 
		ORDER BY NO ASC
	</select>
	<!-- 0-2-5) 첨부파일 댓글은 밑에 1-1 확인 -->
	<!-- 0-2-5) 프로젝트 태그 -->
	<select id="selectProjectTags" resultType="tagVO">
		SELECT * FROM tag 
		WHERE project_post_id = #{id} 
		ORDER BY id ASC
	</select>
	<!-- 000000000000 프로젝트 게시글만! 불러오기 잘 안쓸 것 -->
	<select id="selectProjectPost" resultType="projectPostVO">
		SELECT * FROM PROJECT_POST
		WHERE ID = #{id}
	</select>
	
	<!-- 1-1) 게시글에 해당하는 댓글 목록 불러오기 작성자 정보와 함께. resultMap 반환 -->
	<!-- 댓글 resultmap-->
	<resultMap type="mCommentVO" id="mCommentInfo">
		<association property="mUserVO" javaType="com.moving.domain.MUserVO" 
		column="user_id_from" select="selectCommentAuthor" />
	</resultMap>
	<!-- 프로젝트 댓글 불러오기 -->
	<select id="selectProjectComments" resultMap="mCommentInfo">
		SELECT * FROM M_COMMENT
		WHERE PROJECT_POST_ID = #{id}
		ORDER BY id DESC
		<!-- 나중에 추가하기 답글계층 정렬도 -->
	</select>
	<!-- 댓글 작성자 불러오기 -->
	<select id="selectCommentAuthor" resultType="mUserVO">
		SELECT * FROM m_user WHERE id = #{userIdFrom}
	</select>
	
	
	<!-- 1-2) 게시글에 해당하는 댓글 모두 다 목록 해시맵으로 불러오기 JSON용 HashMap 반환 -->
	<select id="selectCommentListMap" resultType="java.util.Map">
		SELECT c.id, c.user_id_from, c.project_post_id, 
		c.content, c.register_date, u.nickname , u.profile_image_url
		FROM m_comment c
		LEFT OUTER JOIN m_user u on c.user_id_from = u.id
		WHERE c.project_post_id = #{id}
		ORDER BY c.register_date desc
	</select>
	
	
	<!-- 2) 아래 둘은 한 세트처럼 사용. 게시글 개수 카운트, 저장 + 카운트한 값 반환 -->
	<!-- 2-1) 게시글의 댓글 개수 세서, 저장된 값업데이트 -->
	<update id="updateCommentCount">
		UPDATE project_post
		SET comment_count=(
			SELECT COUNT(id) 
			FROM m_comment
			WHERE project_post_id = #{id}
			)
		WHERE id= #{id}
	</update>
	<!-- 2-2) 게시글의 댓글 개수 저장된 값 가져오기 -->
	<select id="selectCommentCount" resultType="projectPostVO">
		SELECT comment_count 
		FROM project_post
		WHERE id = #{id}
	</select>

	<!-- 3) 댓글 작성, 수정, 삭제  -->
	<!-- 3-1) 댓글 작성시 세트로 작동. 댓글 저장 + 카운트 높이기 -->
	<!-- 3-1-1) 댓글 작성-->
	<insert id="insertProjectComment">
		INSERT INTO m_comment 
		(id, user_id_from, content, COMMENT_ID_REPLY, 
		PROJECT_POST_ID, profile_post_id, normal_post_id)
		VALUES 
		(m_comment_seq.nextval, #{userIdFrom}, #{content}, m_comment_seq.nextval, 
		#{projectPostId}, #{profilePostId}, #{normalPostId})
	</insert>
	
	<!--  3-1-2) 댓글 카운트 높이기 -->
	<update id="updateProjectCommentCountOne">
		<if test="projectPostId != 0">
		UPDATE project_post 
		</if>
		<if test="profilePostId != 0 ">
		UPDATE profile_post 
		</if>
		<if test="normalPostId != 0">
		UPDATE normal_post
		</if>
		SET comment_count = comment_count + 1
		<where>
		<if test="projectPostId != 0">
		id = #{projectPostId}
		</if>
		<if test="profilePostId != 0 ">
		id = #{profilePostId}
		</if>
		<if test="normalPostId != 0">
		id = #{normalPostId}
		</if>
		</where>
		
	</update>
	
	<!-- 3-2) 댓글 내용 -->
	<update id="updateProjectComment">
		UPDATE m_comment
		SET content = #{content}
		WHERE id = #{id}
	</update>
	
	<!-- 3-3) 댓글 삭제 -->
	<delete id="deleteProjectComment">
		DELETE FROM m_comment
		WHERE id = #{id}
	</delete>
	
	
	
	<!-- 프로젝트 게시글 조회수 증가 -->
	<update id="updateHit">
		UPDATE PROJECT_POST SET HIT = HIT + 1 WHERE ID = #{id}
	</update>
	
	<!-- 프로젝트 남은 기한 구해서 저장하기 -->
	<update id="test">
		UPDATE PROJECT_POST
		SET LEFT_LIMIT = (
		SELECT dd|| '일'|| SUBSTR (hms, 1, 2)|| '시간'|| SUBSTR (hms, 3, 2)|| '분'||
		SUBSTR (hms, 5, 2)|| '초' day
		FROM (
		SELECT TRUNC (end_date - start_date) dd,
		TO_CHAR (TO_DATE (TRUNC (MOD(end_date - start_date, 1) * 24 * 60 * 60),
		'sssss'), 'hh24miss') hms
		FROM (
		SELECT (SELECT TARGET_LIMIT FROM PROJECT_POST where id=2) end_date,
		TRUNC(SYSDATE, 'MI') start_date
		FROM DUAL
		)
		)
		)
		WHERE ID = #{id}
	</update>
	
	
	<!-- 프로젝트 리스트 : 검색 전, 후 게시물 개수 구하기 -->
	<select id="selectListCount" resultType="int">
		SELECT COUNT(id) FROM project_post
		<where>
			<if test="codeNo == 0 or codeNo == 20001">
		 	 status_code = 1
		 	</if>
		 	<if test="codeNo != 0 and codeNo != 20001">
		 	 status_code = 1 AND code_no = #{codeNo}
		 	</if>
			<if test="findField==''"></if><!-- 검색 전 총 레코드 개수 -->
			<if test="findField=='title'">
			AND title LIKE #{findName}
			</if><!-- 제목으로 검색시 총 레코드 개수 -->
			<if test="findField=='content'">
			AND content LIKE #{findName}
			</if><!-- 내용으로 검색시 총 레코드 개수 -->
		</where>
	</select>
	
	<resultMap type="projectPostVO" id="projectInfo2">
		<id property="id" column="project_post_id"/>
		<result property="title" column="title" />
		<result property="introduce" column="introduce" />
		<result property="userId" column="user_id" />
		<result property="hit" column="hit" />
		<result property="moveCount" column="move_count" />
		<result property="targetPrice" column="target_price" />
		<result property="nowPrice" column="now_price" />
		<result property="leftLimit" column="left_limit" />
		<result property="sponserCount" column="sponser_count" />
		<result property="commentCount" column="comment_count" />
		<result property="registerDate" column="project_post_register_date"/>
		<result property="thumbnailImage" column="thumbnail_image"/>
		<association property="mUserVO" javaType="com.moving.domain.MUserVO"  autoMapping="true"/>
	</resultMap>
	
	<!-- 프로젝트 리스트 : 검색 전, 후 게시글 목록 구하기 -->
	<select id="selectProjectList" resultMap="projectInfo2">
	 SELECT * FROM
	 (SELECT ROW_NUMBER() OVER(ORDER BY P.id DESC) rNum,
	 P.id AS project_post_id, P.title, P.introduce, P.user_id, U.NICKNAME,
	 P.register_date AS project_post_register_date, P.hit, P.move_count,
	 P.target_price, P.now_price, P.target_limit, P.left_limit, P.sponser_count, 
	 P.comment_count, P.thumbnail_image
	 FROM project_post P 
	 LEFT OUTER JOIN m_user U ON P.user_id = U.id 
	 <where>
	 	<if test="codeNo == 0 or codeNo == 20001">
	 	 P.status_code = 1
	 	</if>
	 	<if test="codeNo != 0 and codeNo != 20001">
	 	 P.status_code = 1 AND P.code_no = #{codeNo}
	 	</if>
		 <!-- N.CODE_NO = 20001  -->
		 <if test="findField == ''"></if> <!-- 값이 없을 경우 -->
		 <if test="findField == 'title'"> <!-- 검색 필드가 제목일 경우 -->
		 AND P.title LIKE #{findName}	   <!-- 검색 필드 값대로 검색 -->
		 </if>
		 <if test="findField == 'content'"> <!-- 검색 필드가 내용일 경우 -->
		 AND P.content LIKE #{findName}	 <!-- 검색 필드 값대로 검색 -->
		 </if>
		 <if test="findField == 'nickname'"> <!-- 검색 필드가 닉네임일 경우 -->
		 AND U.nickname LIKE #{findName}	  <!-- 검색 필드 값대로 검색 -->
		 </if>
	 </where>
	 ORDER BY project_post_id DESC)
	 WHERE rNum &gt;= #{startRow}
	 AND rNum &lt;= #{endRow}
		
		<!-- SELECT * FROM (
		SELECT rowNum num, A.* 
		FROM (SELECT P.id as project_post_id, P.title , U.nickname, U.profile_image_url 
		FROM project_post P, m_user U
		WHERE P.user_id = U.id 
		<where>
			P.user_id = U.id 
			<if test="findField==''"></if>검색 전 총 레코드 개수
			<if test="findField=='title'">
			AND title LIKE #{findName}
			</if>제목으로 검색시 총 레코드 개수
			<if test="findField=='content'">
			AND content LIKE #{findName}
			</if>내용으로 검색시 총 레코드 개수
		</where>
		ORDER BY P.id DESC) A
		WHERE rowNum &lt;= #{endRow}
		)
		WHERE num &lt;= #{startRow} -->
	</select>
		<!-- &gt;은 ~보다 크다(>),&lt;은 ~보다 작다(<),rowNum 컬럼은 오라클에서 테이블생성시 생성되는 기본컬럼으로 
			레코드 저장시 일련번호값이 저장됨. -->
			
	<!-- move 수 가장 많은 프로젝트 하나 검색 -->
	<select id="selectBestprojectInfo" resultMap="projectInfo2">
	 SELECT 
	P.id AS project_post_id, P.title, P.introduce, P.user_id, U.NICKNAME,
	 P.register_date AS project_post_register_date, P.hit, P.move_count,
	 P.target_price, P.now_price, P.target_limit, P.left_limit, P.sponser_count, 
	 P.comment_count, P.thumbnail_image
	 FROM project_post P 
	 LEFT OUTER JOIN m_user U ON P.user_id = U.id 
	 WHERE ROWNUM = 1 AND status_code = 1
	 ORDER BY move_count DESC
	</select>
	
	<!-- 랜덤으로 프로젝트 리스트 띄우기 -->
	<select id="selectRandomProjectList" resultMap="projectInfo2" >
	 SELECT RD.* FROM
	 (SELECT 
	 P.id AS project_post_id, P.title, P.introduce, P.user_id, U.NICKNAME,
	 P.register_date AS project_post_register_date, P.hit, P.move_count,
	 P.target_price, P.now_price, P.target_limit, P.left_limit, P.sponser_count, 
	 P.comment_count
	 FROM project_post P 
	 LEFT OUTER JOIN m_user U ON P.user_id = U.id 
	 WHERE status_code = 1
	 ORDER BY dbms_random.value
	 ) RD
	 WHERE rownum &lt;= #{no}
	</select>
	
	<!-- 1-2) 게시글에 해당하는 댓글 모두 다 목록 해시맵으로 불러오기 JSON용 HashMap 반환 -->
	<select id="selectCommentListMapActors" resultType="java.util.Map">
		SELECT c.id, c.user_id_from, c.profile_post_id, 
		c.content, c.register_date, u.nickname , u.profile_image_url
		FROM m_comment c
		LEFT OUTER JOIN m_user u on c.user_id_from = u.id
		WHERE c.profile_post_id = #{id}
		ORDER BY c.register_date desc
	</select>
	
	
	<!-- 2) 아래 둘은 한 세트처럼 사용. 게시글 개수 카운트, 저장 + 카운트한 값 반환 -->
	<!-- 2-1) 게시글의 댓글 개수 세서, 저장된 값업데이트 -->
	<update id="updateCommentCountActors">
		UPDATE profile_post
		SET comment_count=(
			SELECT COUNT(id) 
			FROM m_comment
			WHERE profile_post_id = #{id}
			)
		WHERE id= #{id}
	</update>
	<!-- 2-2) 게시글의 댓글 개수 저장된 값 가져오기 -->
	<select id="selectCommentCountActors" resultType="projectPostVO">
		SELECT comment_count 
		FROM profile_post
		WHERE id = #{id}
	</select>
	
	<!-- 1-2) 게시글에 해당하는 댓글 모두 다 목록 해시맵으로 불러오기 JSON용 HashMap 반환 -->
	<select id="selectCommentListMapNormal" resultType="java.util.Map">
		SELECT c.id, c.user_id_from, c.normal_post_id, 
		c.content, c.register_date, u.nickname , u.profile_image_url
		FROM m_comment c
		LEFT OUTER JOIN m_user u on c.user_id_from = u.id
		WHERE c.normal_post_id = #{id}
		ORDER BY c.register_date desc
	</select>
	
	
	<!-- 2) 아래 둘은 한 세트처럼 사용. 게시글 개수 카운트, 저장 + 카운트한 값 반환 -->
	<!-- 2-1) 게시글의 댓글 개수 세서, 저장된 값업데이트 -->
	<update id="updateCommentCountNormal">
		UPDATE normal_post
		SET comment_count=(
			SELECT COUNT(id) 
			FROM m_comment
			WHERE normal_post_id = #{id}
			)
		WHERE id= #{id}
	</update>
	
	<!-- 게시물 저장 -->
	<insert id="insertSelectProjectPost">
		INSERT INTO project_post
		(id, user_id)
		VALUES
		(project_post_seq.nextval, #{userId})
		<selectKey keyProperty="id" resultType="Integer" order="AFTER">
			SELECT project_post_seq.currval FROM dual
		</selectKey>
	</insert>
	
	<!-- 게시물 수정 -->
	<update id="updateProjectPost">
		UPDATE project_post
		SET 
		title = #{title},
		introduce = #{introduce},
		target_price = #{targetPrice},
		code_no = #{codeNo},
		target_limit = #{targetLimit}
		WHERE 
		id = #{id}
	</update>
	
	<!-- 프로젝트 리워드 저장 -->
	<insert id="insertProjectReward">
		INSERT INTO reward
		(id, user_id, project_post_id, title, content, price, 
		delivery_fee_existence, delivery_expect_date, limit_count, no)
		VALUES
		(reward_seq.nextval, #{userId}, #{projectPostId}, #{title}, #{content}, 
		#{price}, #{deliveryFeeExistence}, #{deliveryExpectDate}, #{limitCount}, #{no})
		<selectKey keyProperty="id" resultType="Integer" order="AFTER">
			SELECT reward_seq.currval FROM dual
		</selectKey>
	</insert>
	
	<!-- 프로젝트 게시글 번호를 기준으로 리워드 모두 불러오기 -->
	<select id="selectProjectReward" resultType="rewardVO">
		SELECT * FROM reward
		WHERE project_post_id = #{projectPostId}
		ORDER BY no ASC
	</select>
</mapper>