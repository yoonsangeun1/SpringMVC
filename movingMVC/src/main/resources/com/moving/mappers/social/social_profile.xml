<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="socialProfile"><!-- 매퍼 네임스페이스명 -->
	<select id="checkId" resultType="socialProfileVO">
		SELECT * FROM social_profile 
		WHERE user_id = #{id}
	</select>

	<!-- @(2)회원 프로필 화면 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ -->
	<resultMap type="socialProfileVO" id="socialProfileInfo">
		<id property="id" column="social_profile_id"/>
		<!-- @(3)게시글 리스트 호출-->
		<collection property="socialPostVO" javaType="java.util.ArrayList" ofType="socialPostInfo"
			column="social_profile_id" select="selectPostAndComment"/>
	</resultMap>
	
	<!-- (1) *아이디(번호)로 회원 프로필 검색 -->
	<select id="selectProfileAndPost" resultMap="socialProfileInfo">
		<!-- 아이디값으로 소셜 프로필을 검색한다. -->
		SELECT id AS social_profile_id, nickname, background_image_path,introduce, profile_image_path,
		follower_count,follow_count,user_id
		from social_profile
		WHERE id = #{id}
	</select>
	
	<!-- 소셜 프로필 번호로 회원 프로필 검색 -->
	<select id="selectProfileAndPostWithId" resultMap="socialProfileInfo">
		<!-- 아이디값으로 소셜 프로필을 검색한다. -->
		SELECT id AS social_profile_id, nickname, background_image_path,introduce, profile_image_path,
		follower_count,follow_count,user_id
		from social_profile
		WHERE id = #{id}
	</select>
	
	<!-- *(3)프로필 아이디값으로 아이디의 "소셜" 게시글을 전부 검색한다. -->
	<select id="selectPostAndComment" resultMap="socialPostInfo">
		SELECT id AS social_post_id, social_id, content, move_count, register_date,publish_availability
		FROM social_post
		WHERE social_id=#{social_profile_id}
		ORDER BY register_date desc
	</select>
	
	<!-- 게시글 번호값으로 게시글 정보 하나만 검색. -->
	<select id="selectOnePostAndComment" resultMap="socialPostInfo">
		SELECT id AS social_post_id, social_id, content, move_count, register_date,publish_availability
		FROM social_post
		WHERE id = #{post_id}
		ORDER BY register_date desc
	</select>
	
	<!-- 타임라인에서) "소셜" 게시글을 전부 검색한다. -->
	<select id="selectAllPostAndComment" resultMap="socialPostInfo">
		SELECT id AS social_post_id, social_id, content, move_count, register_date,publish_availability
		FROM social_post
		ORDER BY register_date desc
	</select>
	
	
	<!-- @(4)게시글 리스트 호출 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ -->
	<resultMap type="socialPostVO" id="socialPostInfo">
		<id property="id" column="social_post_id"/>
		<!-- @(5)게시글 작성자 정보 -->
		<association property="socialProfileVO" javaType="com.moving.domain.SocialProfileVO"
			column="social_id" select="selectSocialProfileOnPost">
			<id property="id" column="social_post_social_id"/>
		</association>
		<!-- @게시글 첨부파일 리스트 호출 -->
		<collection property="attachedFileVO" javaType="java.util.ArrayList"
			column="social_post_id" select="selectForAttachedOnPost"/>
		<!-- +(6)댓글 리스트 호출 -->
		<collection property="mCommentVO" javaType="java.util.ArrayList" ofType="socialCommentInfo"
			column="social_post_id" select="selectCommentsOnPost"/>
	</resultMap>
	
	
	
	<!-- (5)게시글 아이디를 기준으로 게시글에 해당하는 작성자 정보 불러오기 -->
	<select id="selectSocialProfileOnPost" resultType="socialProfileVO">
		SELECT id AS social_post_social_id, user_type, nickname, profile_image_path,user_id
		FROM social_profile
		WHERE id = #{social_id}
	</select>
	
	

	<!-- + 게시글 아이디를 기준으로 게시글의 첨부파일(이미지)를 불러온다. -->
	<select id="selectForAttachedOnPost" resultType="attachedFileVO">
		SELECT id AS attached_file_id, file_path, no, social_post_id FROM attached_file
		WHERE social_post_id= #{social_post_id}
	</select>
	
	<!-- @(7)댓글 리스트 호출-@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@-->
	<resultMap type="mCommentVO" id="socialCommentInfo">
		<id property="id" column="m_comment_id"/>
		<result property="socialProfileIdFrom" column="socialProfileIdFrom"/>
		<!-- @(8)댓글 작성자 정보 -->
		<association property="socialProfileVO" javaType="com.moving.domain.SocialProfileVO"
			column="socialProfileIdFrom" select="selectSocialCommentWriter">
			<id property="id" column="m_comment_social_id"/>
		</association>
	</resultMap>
	
	<!-- *(6)"소셜" 게시글 아이디(번호)로 댓글 전부 검색  -->
	<select id="selectCommentsOnPost" resultMap="socialCommentInfo">
		SELECT id AS m_comment_id, social_profile_id_from as socialProfileIdFrom, content, 
		register_date, move_count, social_post_id FROM m_comment
		WHERE social_post_id = #{social_post_id}
		ORDER BY register_date desc
	</select>
	
	<!-- #(8)댓글 작성자 id로 댓글 작성자 닉네임 검색 -->
	<select id="selectSocialCommentWriter" resultType="socialProfileVO">
		SELECT id AS m_comment_social_id, nickname,profile_image_path FROM social_profile
		WHERE id = #{socialProfileIdFrom}
	</select>
	<!-- @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@일반 단일 쿼리문@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ -->
	
	<!-- 소셜 게시글 작성한다. -->
	<insert id="insertSocialPost">
		insert into social_post(id, code_no,content, social_id,register_date)
		values (social_post_seq.nextval,10007,#{content},#{socialId},sysdate)
	</insert>
	
	<select id="selectIDFromUserID" resultType="SocialProfileVO">
		select * from SOCIAL_PROFILE where user_id=#{using_id}
	</select>
	<!-- 첨부파일을 넣는다. -->
	<insert id="insertAttachFiles">
		insert into attached_file(id, file_type,file_path,no,register_date,social_post_id)
		values (attached_file_seq.nextval, 1,#{filePath},#{no},sysdate,#{socialPostId})
	</insert>
	
	<!-- 게시글을 삭제한다. -->
	<delete id="deleteSocialPost">
		delete from social_post where id=#{post_id}
	</delete>
	
	<!-- 소셜 게시글을 전부 검색한다. -->
	<select id="selectSocialPost">
		select * from social_post order by register_date desc
	</select>
	
	<!-- 일반아이디에 해당하는 소셜 아이디로 주입 -->
	<insert id="insertSocialProfile">
		insert into social_profile(id,nickname,user_id,user_type,introduce,profile_image_path,background_image_path)
		values (social_profile_seq.nextval,#{nickname},#{userId},1,#{introduce},default,default)
		<selectKey keyProperty="id" resultType="Integer" order="AFTER">
			select social_profile_seq.currval from dual
		</selectKey>
	</insert>
	
	<!-- 소셜 회원 정보 수정 -->
	<update id="updateInfo">
		UPDATE social_profile SET nickname = #{nickname},
		introduce = #{introduce} WHERE id = #{id}
	</update>
	
	<!-- 신고한 사람과 신고대상자 넣기 -->
	<insert id="insertSocialReport">
		INSERT INTO report
		(id,title,content,social_profile_id_from,social_profile_id_to)
		values
		(report_seq.nextval,#{title},#{content},#{socialProfileIdFrom},#{socialProfileIdTo})
	</insert>
	<!-- ==================================<구분선>====================================== -->
	<!-- 회원에 해당하는  게시글 검색 (게시글 + 댓글 + 작성자) -->
	<select id="selectSocialPostInfo" resultMap="socialPostInfo">
		SELECT * FROM social_post
		WHERE social_id = #{id}
		ORDER BY register_date DESC
	</select>
	
	<!-- 회원에 해당하는  게시글 검색 (게시글만!) -->
	<select id="selectSocialPostVO" resultType="socialPostVO">
		SELECT * FROM social_post
		WHERE social_id = #{id}
		ORDER BY register_date DESC
	</select>

	<!-- 나중에 조인검색할 때 쓸 수 있음 -->
	<resultMap type="socialPostVO" id="socialPostAll">
		<association property="socialProfileVO" javaType="com.moving.domain.SocialProfileVO" autoMapping="true"/>
		<collection property="mCommentVO" javaType="java.util.List" ofType="mCommentVO" autoMapping="true"/>
	</resultMap>	
	
	<!-- 조인 검색 샘플 -->
	<select id="selectJoin" resultMap="socialPostAll">
		SELECT profile.*, post.*
		FROM social_profile profile, social_post post
		WHERE profile.id = post.social_id 
		ORDER BY register_date DESC
	</select>
</mapper>


	
	