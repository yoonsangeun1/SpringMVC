<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="BoardActors"> <!-- 배우 모집 xml -->

<resultMap type="mCommentVO" id="mCommentInfo">
	<id property="id" column="m_comment_id"/>
	<result property="content" column="content"/>
	<result property="userIdFrom" column="user_id_from"/>
	<association property="mUserVO"
		javaType="com.moving.domain.MUserVO" autoMapping="true" 
	 column="user_id_from" select="selectCommentUser">
	</association>
</resultMap>
<resultMap type="profilePostVO" id="boardInfo" autoMapping="true">
		<id property="id" column="board_actors_id"/> <!-- board_actors_id는 AS로 별칭을 지정해 준 것임. -->
		<result property="title" column="title" />
		<result property="userId" column="board_actors_user_id" />
		<result property="registerDate" column="board_actors_registerDate" />
		<result property="name" column="name" />
		<result property="height" column="height" />
		<result property="websiteUrl" column="website_url" />
		<result property="hit" column="hit" />
		<result property="content" column="content" />
		<result property="email" column="email" />
		<result property="thumbnailImage" column="thumbnail_Image" />
		
			<association property="mUserVO" javaType="com.moving.domain.MUserVO"
			 autoMapping="true">
			</association>
			
			<association property="socialProfileVO" javaType="com.moving.domain.SocialProfileVO"
			 autoMapping="true">
			 <id property="id" column="social_profile_id"/>
			</association>
			
			<collection property="mCommentVO" javaType="java.util.List" ofType="MCommentVOInfo"
			column="board_actors_id" select="selectCommentList">
				<id property="id" column="m_comment_id"/>
			</collection>
			
</resultMap>

<!-- 검색 전,후 게시물 개수 -->
<select id="ba_count" resultType="int">
 SELECT COUNT(*) FROM PROFILE_POST P
 <where>
 P.CODE_NO = 10005
 <if test="findField == ''"></if>	<!-- 검색값이 없을 경우 -->
 <if test="findField == 'content'"> <!-- 검색조건이 내용인 경우 -->
  AND P.CONTENT LIKE #{findName}
 </if> 
 <if test="findField == 'nickname'"> <!-- 검색조건이 닉네임인 경우 -->
  AND P.USER_ID IN
  (SELECT U.ID FROM M_USER U
  WHERE U.nickname LIKE #{findName})
 </if>
 <if test="findField == 'name'">	 <!-- 검색 조건이 이름인 경우 -->
  AND P.NAME IN #{findName}
 </if>
 </where>
</select>

<!-- 페이징 + 목록보기 -->
<select id="ba_list" resultMap="boardInfo">
 SELECT * FROM
 (SELECT ROW_NUMBER() OVER(ORDER BY P.ID DESC) rNum,
 P.thumbnail_Image, P.ID AS board_actors_id,
 P.NAME,P.USER_ID, S.ID AS social_profile_id
 FROM PROFILE_POST P
 LEFT OUTER JOIN M_USER U ON P.USER_ID = U.ID
 LEFT OUTER JOIN SOCIAL_PROFILE S ON U.ID = S.USER_ID
 <where>
 P.CODE_NO = 10005
 <if test="findField == ''"></if>
 <if test="findField == 'content'">
  AND P.CONTENT LIKE #{findName}
 </if>
 <if test="findField == 'nickname'">
  AND U.NICKNAME LIKE #{findName}
 </if>
 <if test="findField == 'name'">
  AND P.NAME LIKE #{findName}
 </if>
 </where>
  ORDER BY board_actors_id DESC)
 WHERE RNUM &gt;= #{startrow}
 AND rNum &lt;= #{endrow}
</select>

<insert id="ba_in"> <!-- code_no는 10005,etctext는 null을 허용해주기 위해 jdbcType 넣어줌. -->
 INSERT INTO PROFILE_POST (ID,CODE_NO,USER_ID,
 THUMBNAIL_IMAGE,CATEGORY,EMAIL,
 BIRTH_DATE,HEIGHT,SEX,
 WEBSITE_URL,CONTENT,REGISTER_DATE,
 NAME,ETCTEXT) 
 VALUES(PROFILE_POST_SEQ.NEXTVAL,10005,#{userId},
 #{thumbnailImage},#{category},#{email},
 to_date(#{birthDate},'yyyy-MM-dd'),#{height},#{sex},
 #{websiteUrl},#{content},sysdate,
 #{name},#{etctext,jdbcType=VARCHAR})
</insert>

<!-- 조회수 증가 -->
<update id="ba_hit">
 UPDATE PROFILE_POST
 SET HIT=HIT+1
 WHERE ID=#{id}
</update>

<!-- 내용보기 -->
<select id="ba_cont" resultMap="boardInfo">
 SELECT P.ID AS board_actors_id, P.USER_ID AS board_actors_user_id,
 P.HIT,P.THUMBNAIL_IMAGE,P.CATEGORY,
 P.EMAIL,P.BIRTH_DATE,P.HEIGHT,
 P.SEX,P.WEBSITE_URL,P.CONTENT,P.REGISTER_DATE AS board_actors_registerDate,
 P.NAME,P.ETCTEXT, S.ID AS social_profile_id
 FROM PROFILE_POST P
 LEFT OUTER JOIN M_USER U ON P.USER_ID = U.ID
 LEFT OUTER JOIN SOCIAL_PROFILE S ON U.id = S.USER_ID
 WHERE P.ID=#{id}
 AND P.CODE_NO = 10005
</select>

<!-- 조회수 증가 없이 내용 가져오기 -->
<select id="ba_cont2" resultMap="boardInfo">
  SELECT P.ID AS board_actors_id, P.USER_ID AS board_actors_user_id,
 P.HIT,THUMBNAIL_IMAGE,CATEGORY,
 EMAIL,BIRTH_DATE,HEIGHT,
 SEX,WEBSITE_URL,CONTENT,REGISTER_DATE AS board_actors_registerDate,
 NAME,ETCTEXT
 FROM PROFILE_POST P
 WHERE P.ID=#{id}
</select>

<select id="selectCommentList" resultMap="mCommentInfo">
SELECT id AS m_comment_id, content, user_id_from
FROM m_comment
WHERE profile_post_id = #{profile_post_id}
order by m_comment_id desc
</select>
<select id="selectCommentUser" resultType="mUserVO">
SELECT nickname, profile_image_url
FROM m_user
WHERE id = #{user_id_from}
</select>

<!-- 내용수정 -->
<update id="ba_edit">
 UPDATE PROFILE_POST
 SET THUMBNAIL_IMAGE=#{thumbnailImage},
 CATEGORY=#{category},ETCTEXT=#{etctext,jdbcType=VARCHAR},
 EMAIL=#{email},BIRTH_DATE=to_date(#{birthDate},'yyyy-MM-dd'), HEIGHT=#{height},
 SEX=#{sex},WEBSITE_URL=#{websiteUrl}, CONTENT=#{content}
 WHERE ID=#{id}
</update>

<update id="ba_edit2">
 UPDATE PROFILE_POST
 SET CATEGORY=#{category}, ETCTEXT=#{etctext,jdbcType=VARCHAR},
 EMAIL=#{email},BIRTH_DATE=to_date(#{birthDate},'yyyy-MM-dd'), HEIGHT=#{height},
 SEX=#{sex}, WEBSITE_URL=#{websiteUrl}, CONTENT=#{content}
 WHERE ID=#{id}
</update>

<delete id="ba_del">
 DELETE FROM PROFILE_POST
 WHERE ID=#{id}
</delete>


</mapper>
