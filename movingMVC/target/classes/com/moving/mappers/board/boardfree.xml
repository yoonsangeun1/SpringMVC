<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="BoardFree">

<resultMap type="normalPostVO" id="boardInfo" autoMapping="true">
		<id property="id" column="board_free_id"/> <!-- board_free_id는 AS로 별칭을 지정해 준 것임. -->
		<result property="title" column="title" />
		<result property="userId" column="board_free_user_id" />
		<result property="registerDate" column="board_free_registerDate" />
		<result property="hit" column="hit" />
		<result property="content" column="content" />
		
			<association property="mUserVO" javaType="com.moving.domain.MUserVO"
			 autoMapping="true">
			</association>
			
			<association property="socialProfileVO" javaType="com.moving.domain.SocialProfileVO"
			 autoMapping="true">
			 <id property="id" column="social_profile_id"/>
			</association>
			
</resultMap>
	
<!-- 	<collection property="mCommentVO" javaType="java.util.List" ofType="commentInfo"
	column="id" select="test2" /> 
	<association property="mUserVO" javaType="com.moving.domain.MUserVO" autoMapping="true"/>
</resultMap>

<resultMap type="normalPostVO" id="boardInfo">
	<association property="mUserVO" javaType="mUserVO"
	column="user_id" select="test" />
</resultMap>
 
 
 <select id="test" resultType="mUserVO">
 	select nickname from m_user where id=#{user_id}
 </select>
 
 <select id="test2" resultMap="commentInfo">
  select content, user_id_from from M_COMMENT where normal_post_id=#{id}
 </select>
 
 <resultMap type="mCommentVO" id="commentInfo">
	<association property="mUserVO" javaType="mUserVO" 
	column="user_id_from" select="test3"/>
</resultMap>

<select id="test3" resultType="mUserVO">
 select nickname from m_User where id=#{user_id_from}
</select> -->

 <!-- 검색 전,후 게시물 개수 -->
 <select id="bf_count" resultType="int">
    SELECT COUNT(*) FROM NORMAL_POST N
  <where>
   <if test="findField == ''"></if> <!-- 검색값이 없을 경우 -->
   <if test="findField == 'title'"> <!-- 검색조건이 제목인 경우  -->
    N.TITLE LIKE #{findName} <!-- LIKE로 찾기 기능 사용 -->
   </if>
   <if test="findField == 'content'"> <!-- 검색조건이 내용인 경우 -->
    N.CONTENT LIKE #{findName}
   </if> 
   <if test="findField == 'nickname'"> <!-- 검색조건이 닉네임인 경우 -->
	N.USER_ID IN
	(SELECT U.ID FROM M_USER U
	WHERE U.nickname LIKE #{findName})
   </if>
   </where>
 </select>
 
 <!-- 페이징 + 목록보기 -->
<select id="bf_list" resultMap="boardInfo">
 SELECT * FROM
 (SELECT ROW_NUMBER() OVER(ORDER BY N.ID DESC) rNum,
 N.ID AS board_free_id, N.TITLE, U.NICKNAME, S.ID AS social_profile_id,
 N.REGISTER_DATE AS board_free_registerDate, N.HIT
FROM NORMAL_POST N 
 LEFT OUTER JOIN M_USER U ON N.USER_ID = U.ID 
 LEFT OUTER JOIN SOCIAL_PROFILE S ON U.ID = S.USER_ID
 <where>
 <if test="findField == ''"></if> <!-- 값이 없을 경우 -->
 <if test="findField == 'title'"> <!-- 검색 필드가 제목일 경우 -->
  N.TITLE LIKE #{findName}	   <!-- 검색 필드 값대로 검색 -->
 </if>
 <if test="findField == 'content'"> <!-- 검색 필드가 내용일 경우 -->
  N.CONTENT LIKE #{findName}	 <!-- 검색 필드 값대로 검색 -->
 </if>
 <if test="findField == 'nickname'"> <!-- 검색 필드가 닉네임일 경우 -->
  U.NICKNAME LIKE #{findName}	  <!-- 검색 필드 값대로 검색 -->
 </if>
 </where>
 ORDER BY board_free_id DESC)
 WHERE rNum &gt;= #{startrow}
 AND rNum &lt;= #{endrow}
</select>


 
 
 
<!--  <select id="bf_list" resultMap="boardInfo">
 SELECT * FROM
(SELECT ROW_NUMBER() OVER(ORDER BY N.ID DESC) rNum,
N.ID, N.TITLE, U.NICKNAME,
N.REGISTER_DATE, N.HIT
FROM NORMAL_POST N, M_USER U
WHERE N.USER_ID = U.ID
ORDER BY N.ID DESC)
WHERE rNum &gt;= #{startrow}
AND rNum &lt;= #{endrow}  -->

<!--  SELECT * FROM
(SELECT ROW_NUMBER() OVER(ORDER BY ID DESC) rNum,
ID, TITLE, USER_ID,
REGISTER_DATE, HIT
FROM NORMAL_POST 
ORDER BY ID DESC)
WHERE rNum &gt;= #{startrow}
AND rNum &lt;= #{endrow} 12월 13일 상은햄이랑 수정 중 마지막에 작성한 코드. -->

<!-- SELECT * FROM
(SELECT ROW_NUMBER() OVER(ORDER BY N.ID DESC) rNum, 
N.ID, N.TITLE,
 U.NICKNAME, N.REGISTER_DATE, N.HIT
FROM NORMAL_POST N, M_USER U
WHERE N.USER_ID = U.ID
ORDER BY N.ID DESC)
WHERE rNum >= 11
AND rNum <= 20;  이런식으로 처리해서 페이징 구현함. 이유) 2개의 테이블을 비교해서 값을 가져와야 하기 때문임.
나는 nickname이 필요했었음. -->
  
  <!-- rowNum컬럼은 오라클에서 테이블 생성시 생성되는
  기본컬럼으로 레코드 저장시 일련번호값이 저장됨. rNum
  rowNum컬럼의 별칭명. &gt;은 >, &lt; < , 1이상
  10이하 사이의 10개목록만 검색 -->

 
 <!-- 글쓰기 -->
 <insert id="bf_in">
  INSERT INTO NORMAL_POST (ID,USER_ID,TITLE,CONTENT) 
  VALUES(NORMAL_POST_SEQ.NEXTVAL,#{userId},#{title},
  #{content})
 </insert>
 
 <!-- 조회수 증가 -->
 <update id="bf_hit">
  UPDATE NORMAL_POST 
  SET HIT=HIT+1 
  WHERE ID=#{id}
 </update>
 
 <!-- 내용보기 -->
 <select id="bf_cont" resultMap="boardInfo">
  SELECT N.ID AS board_free_id, N.USER_ID AS board_free_user_id,
   N.TITLE, N.HIT, N.CONTENT, M.nickname
  FROM NORMAL_POST N, M_USER M
  WHERE N.USER_ID = M.ID
  AND N.ID=#{id}
 </select>
 
 <!-- 내용수정 -->  <!-- session 본인 닉네임으로만 수정 가능하게 해야함. -->
 <update id="bf_edit">
 UPDATE NORMAL_POST 
 SET TITLE=#{title},
   	 CONTENT=#{content} 
 WHERE ID=#{id}   
 </update>
 
 <!-- 게시글 삭제 --> <!-- 본인만 본인 게시글 삭제 가능하게 해야함 -->
 <delete id="bf_del">
  DELETE FROM NORMAL_POST 
  WHERE ID=#{id}
 </delete>
 
 
<!--  <resultMap type="bf" id="bf_result"> type는 mybatis에서 쓴 것
 normal_postVO는 1개 이지만 xml은 여러개 해도 됨? ㅇㅋ
  <id property="id" column="id" /> 컬럼명은 db컬럼명과 동일해야함, 프로퍼티는 노상관
  <result property="title" column="title" />
  <association property="user_id" column="user_id" javaType="mu" />
 </resultMap> -->
 

 </mapper>




